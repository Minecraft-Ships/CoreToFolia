plugins {
    id 'java-library'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://papermc.io/repo/repository/maven-public/')
    }

    maven {
        url = uri('https://jitpack.io')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

group = 'org.ships'
version = '1.0-SNAPSHOT'
description = 'CoreToFolia'

java.sourceCompatibility = JavaVersion.VERSION_17
java.sourceCompatibility = JavaVersion.VERSION_17

compileJava.options.encoding = 'UTF-8'

def excludePluginYaml = false

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task plugin {
    doLast {
        excludePluginYaml = true

        if (excludePluginYaml) {
            def pluginFile = file(project.buildDir.path + '/resources/main/plugin.yml')
            def ex = pluginFile.exists()
            pluginFile.delete()
        }
    }

    finalizedBy build
}

jar {
    dependsOn configurations.runtimeClasspath

    doLast {
        def path = project.buildDir.path + "/libs/"
        def fileName = 'TranslateCoreFolia.jar'
        file(path).mkdirs()
        archiveClassifier = 'uber'
        archiveFileName = fileName
        destinationDirectory = file(path)

        if (excludePluginYaml) {
            exclude("plugin.yml")
        }

        from sourceSets.main.output
        from {
            configurations.runtimeClasspath.findAll {
                it.name.endsWith('jar') && !it.name.contains("junit") && !it.name.contains("hamcrest")
            }.collect {
                zipTree(it).matching {
                    exclude "*.txt"
                }
            }
        }
        println("Creating file in '" + path + fileName + "'")
    }
}

dependencies {
    if (project.hasProperty("folia-api-version")) {
        compileOnly 'dev.folia:folia-api:' + project.property("folia-api-version") + "-R0.1-SNAPSHOT"
    } else {
        compileOnly 'dev.folia:folia-api:1.19.4-R0.1-SNAPSHOT'
        System.out.println("To specify a Folia build, use ' -P folia-api-version=1.19.4")
    }
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7', { exclude group: 'org.bukkit', module: 'bukkit' }
    try {
        api project(":TranslateCore")
    } catch (UnknownProjectException ignored) {
        System.out.println("Could not find subModule of ShipsCore, using jit instead")
        api 'com.github.Minecraft-Ships:TranslateCore:master-SNAPSHOT'
    }
    compileOnly group: 'net.kyori', name: 'examination-api', version: '1.1.0'
    compileOnly group: 'net.kyori', name: 'adventure-api', version: '4.7.0'
    compileOnly 'net.kyori:adventure-text-serializer-legacy:4.7.0'
    compileOnly 'net.kyori:adventure-text-serializer-plain:4.7.0'
}
